var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _class2, _temp;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { Component, Children } from 'react';
import { withRouter, Router as ReactRouter } from 'react-router-dom';

var RouterMobX = withRouter(_class = (_temp = _class2 = function (_Component) {
	_inherits(RouterMobX, _Component);

	function RouterMobX() {
		_classCallCheck(this, RouterMobX);

		return _possibleConstructorReturn(this, (RouterMobX.__proto__ || Object.getPrototypeOf(RouterMobX)).apply(this, arguments));
	}

	_createClass(RouterMobX, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			this.props.routerStore.__initial(this.props);
		}
	}, {
		key: 'render',
		value: function render() {
			return Children.only(this.props.children);
		}
	}]);

	return RouterMobX;
}(Component), _class2.propTypes = {
	children: PropTypes.node.isRequired,
	routerStore: PropTypes.object.isRequired,
	history: PropTypes.object.isRequired,
	location: PropTypes.object.isRequired
}, _temp)) || _class;

export default function Router(_ref) {
	var RouterComp = _ref.component,
	    children = _ref.children,
	    routerStore = _ref.routerStore,
	    other = _objectWithoutProperties(_ref, ['component', 'children', 'routerStore']);

	return React.createElement(
		RouterComp,
		other,
		React.createElement(
			RouterMobX,
			{ routerStore: routerStore },
			Children.only(children)
		)
	);
}

Router.propTypes = {
	children: PropTypes.node.isRequired,
	component: PropTypes.func.isRequired,
	routerStore: PropTypes.object.isRequired
};

Router.defaultProps = {
	component: ReactRouter
};